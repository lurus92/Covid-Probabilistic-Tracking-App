"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const plist = require("simple-plist");
const converter_common_1 = require("./converter.common");
const resource_ios_1 = require("../resource.ios");
class ConverterIOS extends converter_common_1.ConverterCommon {
    cleanObsoleteResourcesFiles(resourcesDirectory, languages) {
        fs.readdirSync(resourcesDirectory).filter(fileName => {
            const match = /^(.+)\.lproj$/.exec(fileName);
            return match && !languages.has(match[1]);
        }).map(fileName => {
            return path.join(resourcesDirectory, fileName);
        }).filter(filePath => {
            return fs.statSync(filePath).isDirectory();
        }).forEach(lngResourcesDir => {
            ["InfoPlist.strings", "Localizable.strings"].forEach(fileName => {
                const resourceFilePath = path.join(lngResourcesDir, fileName);
                this.removeFileIfExists(resourceFilePath);
            });
            this.removeDirectoryIfEmpty(lngResourcesDir);
        });
        return this;
    }
    createLanguageResourcesFiles(language, isDefaultLanguage, i18nEntries) {
        const infoPlistStrings = new Map();
        i18nEntries.forEach((value, key) => {
            if (key === "app.name") {
                infoPlistStrings.set("CFBundleDisplayName", value);
                infoPlistStrings.set("CFBundleName", value);
            }
            else if (key.startsWith("ios.info.plist.")) {
                infoPlistStrings.set(key.substr(15), value);
            }
        });
        const languageResourcesDir = path.join(this.appResourcesDirectoryPath, `${language}.lproj`);
        this
            .createDirectoryIfNeeded(languageResourcesDir)
            .writeStrings(languageResourcesDir, "Localizable.strings", i18nEntries)
            .writeStrings(languageResourcesDir, "InfoPlist.strings", infoPlistStrings);
        if (isDefaultLanguage) {
            infoPlistStrings.set("CFBundleDevelopmentRegion", language);
            this.writeInfoPlist(infoPlistStrings);
        }
        return this;
    }
    encodeI18nEntries(i18nEntries) {
        const encodedI18nEntries = new Map();
        i18nEntries.forEach((value, key) => {
            const encodedKey = resource_ios_1.encodeKey(key);
            const encodedValue = resource_ios_1.encodeValue(value);
            encodedI18nEntries.set(encodedKey, encodedValue);
        });
        return encodedI18nEntries;
    }
    writeStrings(languageResourcesDir, resourceFileName, i18nEntries) {
        let content = "";
        this.encodeI18nEntries(i18nEntries).forEach((encodedValue, encodedKey) => {
            content += `"${encodedKey}" = "${encodedValue}";\n`;
        });
        const resourceFilePath = path.join(languageResourcesDir, resourceFileName);
        this.writeFileSyncIfNeeded(resourceFilePath, content);
        return this;
    }
    writeInfoPlist(infoPlistValues) {
        const resourceFilePath = path.join(this.appResourcesDirectoryPath, "Info.plist");
        if (!fs.existsSync(resourceFilePath)) {
            this.logger.warn(`'${resourceFilePath}' doesn't exists: unable to set default language`);
            return this;
        }
        const data = plist.readFileSync(resourceFilePath);
        let resourceChanged = false;
        infoPlistValues.forEach((value, key) => {
            if (!data.hasOwnProperty(key) || data[key] !== value) {
                data[key] = value;
                resourceChanged = true;
            }
        });
        if (resourceChanged) {
            plist.writeFileSync(resourceFilePath, data);
        }
    }
}
exports.ConverterIOS = ConverterIOS;
