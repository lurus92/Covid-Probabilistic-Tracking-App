"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const mkdirp = require("mkdirp");
const path = require("path");
class ConverterCommon {
    constructor(dataProvider, logger, platformData, projectData) {
        this.dataProvider = dataProvider;
        this.logger = logger;
        this.platformData = platformData;
        this.projectData = projectData;
        this.appResourcesDirectoryPath = path.join(projectData.appResourcesDirectoryPath, platformData.normalizedPlatformName);
        this.appResourcesDestinationDirectoryPath = platformData
            .platformProjectService
            .getAppResourcesDestinationDirectoryPath(projectData);
        this.i18nDirectoryPath = path.join(projectData.appDirectoryPath, "i18n");
    }
    run() {
        this.dataProvider.getLanguages().forEach((languageI18nEntries, language) => {
            this.createLanguageResourcesFiles(language, language === this.dataProvider.getDefaultLanguage(), languageI18nEntries);
        });
        if (fs.existsSync(this.appResourcesDirectoryPath) && fs.statSync(this.appResourcesDirectoryPath).isDirectory()) {
            this.cleanObsoleteResourcesFiles(this.appResourcesDirectoryPath, this.dataProvider.getLanguages());
        }
        return this;
    }
    createDirectoryIfNeeded(directoryPath) {
        if (!fs.existsSync(directoryPath) || !fs.statSync(directoryPath).isDirectory()) {
            mkdirp.sync(directoryPath);
        }
        return this;
    }
    removeDirectoryIfEmpty(directoryPath) {
        try {
            fs.rmdirSync(directoryPath);
        }
        catch (error) { }
        return this;
    }
    removeFileIfExists(filePath) {
        try {
            fs.unlinkSync(filePath);
        }
        catch (error) { }
        return this;
    }
    writeFileSyncIfNeeded(filePath, content) {
        try {
            if (content === fs.readFileSync(filePath, "utf8")) {
                return this;
            }
        }
        catch (error) { }
        fs.writeFileSync(filePath, content, { encoding: "utf8" });
        return this;
    }
}
exports.ConverterCommon = ConverterCommon;
